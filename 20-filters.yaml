#Filters in Ansible are from Jinja2, and are used for transforming data inside a template expression
# defaulting undefined variables:
#Jinja2 provides a useful ‘default’ filter that is often a better approach to failing if a variable is not defined
- name: demo on filters
  hosts: local
  connection: local
  tasks:
  - name: print default variable
    ansible.builtin.debug:
      #msg: The course is {{ course }}
      msg: The course is {{ course | default('Ansible') }}
# if you execute above playbook we get error undefined variable ( undefined variable. The error was: 'course' is undefined.)
#we can resolve this by declaring default variable


# conver string in to upper case by using "upper" function 
# conver string in to lower case by using "lower" function 
  - name: convert to uppercase
    vars:
      greeting: "Hello Venkat"
    ansible.builtin.debug:
      msg: " {{ greeting | upper }}"

  - name: convert to lowercase
    vars:
      greeting: "Hello VENKAT"
    ansible.builtin.debug:
      msg: " {{ greeting | lower }}"

  # to get the unique value from series of multiple events by using "unique" function.
  - name: to get the unique value
    vars:
      numbers: [1,2,34,4,1,4,25,65,1,2]
    ansible.builtin.debug:
      msg: " {{ numbers | unique }}"

  - name: to get minumum  and maximum
    vars:
      numbers: [1,2,34,4,1,4,25,65,1,2]
    ansible.builtin.debug:
      msg: " Min: {{ numbers | min }}, Max: {{ numbers | max }}"

  - name: conver map to list
    vars:
      course:
        name: "DevOps  with AWS"
        triner: "Siva kumar"
        duration: "120hrs"
    ansible.builtin.debug:
      msg: " {{ course | dict2items }}"

  - name: convert list to map
    vars:
      course:
        - {'key': 'name', 'value': 'DevOps  with AWS'} 
        - {'key': 'triner', 'value': 'Siva kumar'} 
        - {'key': 'duration', 'value': '120hrs'}
    ansible.builtin.debug:
      msg: " {{ course | items2dict }}"

